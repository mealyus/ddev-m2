name: Prepare Release
# example: gh workflow run release.yml -f tag_name=v1.1.4 -f draft=true
on:
  workflow_dispatch:
    branches:
      - main
    inputs:
      tag_name:
        type: string
        required: true
      draft:
        type: boolean
        description: Draft release
        default: false
      prerelease:
        type: boolean
        description: Prerelease
        default: false

jobs:
  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check naming convention
        run: |
          VERIF=$(echo ${{ github.event.inputs.tag_name }} | grep -E "^v([0-9]{1,}\.)([0-9]{1,}\.)([0-9]{1,})(-(alpha|beta)\.[0-9]{1,})?$")
          if [ ! ${VERIF} ]
          then
            echo "Tag name '${{ github.event.inputs.tag_name }}' does not comply with naming convention vX.Y.Z"
            exit 1
          fi

      - name: Set version number without v
        run: |
          echo "VERSION_NUMBER=$(echo ${{ github.event.inputs.tag_name }} | sed 's/v//g' )" >> $GITHUB_ENV

      - name: Clone sources
        uses: actions/checkout@v2

      - name: Check version ${{ env.VERSION_NUMBER }} consistency in CHANGELOG
        run: |
          CURRENT_DATE=$(date +'%Y-%m-%d')
          CHANGELOG_VERSION=$(grep -E "## \[(.*)\] - $CURRENT_DATE"  CHANGELOG.md | sed 's/ //g')
          if [[ $CHANGELOG_VERSION == "##[${{ env.VERSION_NUMBER }}]-$CURRENT_DATE" ]]
          then
              echo "CHANGELOG VERSION OK"
          else
              echo "CHANGELOG VERSION KO"
              exit 1
          fi

      - name: Check DDEV expected version in README
        run: |
          EXPECTED_VERSION=$(cat .ddev/homeadditions/DDEV_EXPECTED_VERSION.txt)
          README_VERSION_1=$(grep -oP "This project is fully compatible with DDEV \K(.*)," README.md | sed 's/,//g')
          if [[ $README_VERSION_1 == $EXPECTED_VERSION ]]
          then
              echo "README VERSION 1 OK"
          else
              echo "README VERSION 1 KO"
              echo $README_VERSION_1
              echo $EXPECTED_VERSION
              exit 1
          fi

          README_VERSION_2=$(grep -oP "^bash install_ddev.sh v\K(.*)$" README.md)
          if [[ $README_VERSION_2 == $EXPECTED_VERSION ]]
          then
              echo "README VERSION 2 OK"
          else
              echo "README VERSION 2 KO"
              echo $README_VERSION_2
              echo $EXPECTED_VERSION
              exit 1
          fi

      - name: Create Tag ${{ github.event.inputs.tag_name }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ github.event.inputs.tag_name }}",
              sha: context.sha
            })

      - name: Prepare release notes
        run: |
          VERSION_RELEASE_NOTES=$(awk -v ver="[${{ env.VERSION_NUMBER }}]" '/^## / { if (p) { exit }; if ($2 == ver) { p=1; next} } p && NF' CHANGELOG.md)
          echo "$VERSION_RELEASE_NOTES" >> CHANGELOG.txt


      - name: Create release ${{ env.VERSION_NUMBER }}
        uses: softprops/action-gh-release@v1
        with:
          body_path: CHANGELOG.txt
          name: ${{ env.VERSION_NUMBER }}
          tag_name: ${{ github.event.inputs.tag_name }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
